package yuh;

// Java program to create a blank text
// field of definite number of columns.
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

class Yoinked extends JFrame implements ActionListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	// JTextField
	static JTextField t;

	// JFrame
	static JFrame f;

	// JButton
	static JButton b;

	// label to display text
	static JLabel l;

	static JLabel ll;

	// default constructor
	Yoinked() {
	}

	public static void wait(int ms) {
		try {
			Thread.sleep(ms);
		} catch (InterruptedException ex) {
			Thread.currentThread().interrupt();
		}
	}

	// main class
	public static void main(String[] args) {
		// create a new frame to store text field and button
		f = new JFrame("Bandcamp Yoinker");

		// create a label to display text
		l = new JLabel("Please enter the URL to the album or song from BandCamp.");

		// create a new button
		b = new JButton("submit");

		// create a object of the text class
		Yoinked te = new Yoinked();

		// addActionListener to button
		b.addActionListener(te);

		// create a object of JTextField with 16 columns
		t = new JTextField(16);

		// create a panel to add buttons and textfield
		JPanel p = new JPanel();

		// add buttons and textfield to panel
		p.add(t);
		p.add(b);
		p.add(l);

		// add panel to frame
		f.add(p);

		// set the size of frame
		f.setSize(400, 200);

		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		f.setVisible(true);
	}

	// if the button is pressed
	public void actionPerformed(ActionEvent e) {
		String s = e.getActionCommand();
		if (s.equals("submit")) {
			// set the text of the label to the text of the field
			l.setText(t.getText());
			try {
				yoink();
			} catch (URISyntaxException | IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			l.setText("Done");
			// set the text of field to blank
			t.setText("");
			// wait(1000);
			// System.exit(ABORT);

		}
	}// ends actionperformed

	public String path() throws URISyntaxException {
		return new File(Yoinked.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
	}

	public void yoink() throws URISyntaxException, IOException {
		// Scanner sc = new Scanner(System.in);
		String[] ILLEGAL_CHARACTERS = { "?", "*", "|", ":" };
		// Where do you want the files stored?
		// String path = "/Users/damie/Desktop/test/";
		// String path = path();
		String path = path().substring(0, path().length() - path().length());
		if (path.endsWith("/")) {
			path = path.substring(0, path.length() - 1);
		}
		ArrayList<String> urlResults = new ArrayList<>();
		ArrayList<String> songResults = new ArrayList<>();
		boolean goodInput = false;

		String urlToRead = null;
		// System.out.println("Please enter the URL to the album or song from
		// BandCamp.");
		// System.out.println("Example:
		// https://tpazolite.bandcamp.com/album/tpzremake-01");

		while (!goodInput) {
			// urlToRead = sc.nextLine();
			urlToRead = t.getText();
			if (urlToRead.contains("https://")) {
				goodInput = true;
			} else {
				t.setText("Please enter a valid album or song url from bandcamp.com");
				// System.out.println("Please enter a valid album or song url from
				// bandcamp.com");
			}
		}
		URL url;
		HttpURLConnection conn;
		BufferedReader rd;
		String line;
		StringBuilder html = new StringBuilder();
		StringBuilder html2 = new StringBuilder();
		try {
			url = new URL(urlToRead);
			conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("GET");
			rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			while ((line = rd.readLine()) != null) {
				html.append(line);
				html2.append(line);
			}
			rd.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		//
		// Find song links
		//
		int urlStartIndex = 0;
		int urlEndIndex = 0;
		while (urlStartIndex > -1 && urlEndIndex > -1) {
			urlStartIndex = html.indexOf("https://t4.bcbits.com");
			urlEndIndex = html.indexOf("&quot;},&quot;track_id");

			try {
				if (!(urlStartIndex == -1) && !(urlEndIndex == -1)) {
					urlResults.add(html.substring(urlStartIndex, urlEndIndex));
					html = new StringBuilder(html.substring(urlEndIndex + 20));
					urlStartIndex = 0;
					urlEndIndex = 0;
				}
			} catch (Exception e) {
				System.out.println("Something went wrong! url");
				break;
			}

		}
		int songCount = 0;
		for (int i = 0; i < urlResults.size(); i++) {
			songCount++;
		}
		System.out.println("Found " + songCount + " songs.");
		System.out.println("");

		// Replaces all &apos; &#39; and %27 with actual apostrophe within html2
		// Just so file names don't contain weird text.
		Pattern p = Pattern.compile("(&apos;)|(&#39;)|(%27)");
		Matcher m = p.matcher(html2);
		html2 = new StringBuilder(m.replaceAll("'"));

		Pattern p2 = Pattern.compile("(&amp;)");
		Matcher m2 = p2.matcher(html2);
		html2 = new StringBuilder(m2.replaceAll("&"));

		// int charReplace = 0;
		/*
		 * while (charReplace > -1) { charReplace = html2.indexOf("*"); if
		 * (!(charReplace == -1)) html2 = new StringBuilder(html2.replace(charReplace,
		 * charReplace + 1, "")); }
		 */
		for (int i = 0; i < ILLEGAL_CHARACTERS.length; i++) {
			int charReplace = 0;
			while (charReplace > -1) {
				charReplace = html2.indexOf(ILLEGAL_CHARACTERS[i]);
				if (!(charReplace == -1))
					html2 = new StringBuilder(html2.replace(charReplace, charReplace + 1, ""));
			}
		}

		//
		// Find song names
		//
		// for (String urlNum : urlResults) {
		int songStartIndex;
		int songEndIndex = 0;
		// while (songEndIndex > -1) {
		if (urlResults.size() > 1) {
			for (int i = 1; i < urlResults.size() + 1; i++) {
				songStartIndex = html2.indexOf("\"><span class=\"track-title\">");
				html2 = new StringBuilder(html2.substring(songStartIndex + 28));
				songStartIndex = 0;
				songEndIndex = html2.indexOf("</span></a>");

				try {
					if (!(songEndIndex == -1)) {
						if (!(songEndIndex - songStartIndex >= 50)) {
							songResults.add(i + ". " + html2.substring(songStartIndex, songEndIndex));
						} else
							songResults.add(i + ". ");
						songEndIndex = 0;

					}
					// System.out.println("No song end index");
				} catch (Exception e) {
					System.out.println("Something went wrong! song name");
					break;
				}

			}
		} else if (urlResults.size() == 1) {
			songStartIndex = html2.indexOf("<h2 class=\"trackTitle\">");
			html2 = new StringBuilder(html2.substring(songStartIndex + 35));
			songStartIndex = 0;
			songEndIndex = html2.indexOf("</h2>");

			try {
				if (!(songEndIndex == -1)) {
					if (!(songEndIndex - songStartIndex >= 50)) {
						songResults.add("1. " + html2.substring(songStartIndex, songEndIndex - 20));
					} else
						songResults.add("1. ");
					songEndIndex = 0;

				}
				// System.out.println("No song end index");
			} catch (Exception e) {
				System.out.println("Something went wrong! song name");

			}
		}

		for (String result : songResults) {
			System.out.println(result);
		}

		//
		// Download
		//
		if (songResults.size() > 0) {
			for (int i = 1; i <= urlResults.size(); i++) {
				try (BufferedInputStream inputStream = new BufferedInputStream(
						new URL(urlResults.get(i - 1)).openStream());
						FileOutputStream fileOS = new FileOutputStream(path + songResults.get(i - 1) + ".mp3")) {
					// FileOutputStream fileOS = new FileOutputStream(path + songResults.get(i - 1)
					// + ".mp3")) {
					// FileOutputStream fileOS = new FileOutputStream(path + i + ".mp3")) {
					byte[] data = new byte[1024];
					int byteContent;
					while ((byteContent = inputStream.read(data, 0, 1024)) != -1) {
						fileOS.write(data, 0, byteContent);
					}
				} catch (IOException e) {
					// handles IO exceptions
				}

			}
		} else {
			System.out.println("No songs found");
		}
		// sc.close();
		

	}

}// ends class
